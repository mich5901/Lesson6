Testing Theory

There are many goals to achieve when testing a program:

1) Complete Code Coverage
Not every line of code in the program runs every time. The goal of complete code
coverage is to test enough times to ensure every line gets executed at least once.

2) Testing Boundary Conditions
Use data that falls right around the limits of certain boundaries.
Ex -> just below, just at and just above particular requirements found in loops
and if statements.

3) Testing Extreme Conditions
Use data that falls very far outside the required limits.
Ex -> try paying employee $1000 / hour || 200 hours of work 
Ensure that program responds appropriately to this data.

4) Testing Efficiency
We want to avoid using data sets that take us down identical paths of
execution in the code. Once an area is tested we don't need further data that
tests the same thing.
Equivalence Class (Category) - When two sets of data follow the same path in
a program, they belong to the same equivalence class.
Ex -> Type 1 50 Hours   Type 1 Employee 48 Hours


Test Log:
Test #            Description               Expected               Result
------            -----------               --------               ------
1(Code Coverage)  Rate:10,Type:1,Hours:30   300
2(Code Coverage)  Rate:10,Type:1,Hours:30   400+200=600
3(Boundary Test)  R:10,T:1,H:39,40,41|      OT for 41
4(Extreme)        R:10,T:1,H:0 and 168      Hours not set
5(Boundary)R:6.49,6.50,30.50,30.51|T:1|H:10) Rate only set for #2,3
6(Boundary)        R:10|T:2|H:0,1,60,610)   Hours only set for #2,3
7(Boundary)       R:10,|T:0,1,2,3|H:45)     Type only set for #2,3
                                            OT only for type 1, not 2|